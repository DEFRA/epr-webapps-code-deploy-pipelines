trigger: none
pr: none
pool: DEFRA-COMMON-ubuntu2204-SSV3

parameters:
- name: updateSettings
  type: boolean
  displayName: 'Update app service configurations'
  default: false
- name: teamName
  displayName: 'Select a dev environment to deploy to:    (works only with "development" as target env)'
  default: 'DEV6'
  type: string
  values:
  - DEV1
  - DEV2
  - DEV3
  - DEV5
  - DEV6
  - DEV7
  - DEV8
  - DEV9
  - DEV10
  - DEV11
  - DEV12
  - DEV13
  - DEV14    
- name: envToDeploy
  displayName: 'Target environment to deploy'
  default: development
  type: string
  values:
  - development
  - tst
  - preprod
  - preprod2
  - prod
  - DEV15
- name: releaseVersion
  displayName: 'Release version (e.g. Release-2.8.2). In development environments you probably want to use latest as this will deploy from main branch using the latest commit)'
  default: 'latest'
  type: string

resources:
  repositories:

   # The repo will be reference the repo by a release tag (if the releaseVersion parameter contains 'release') otherwise it will pull down the main branch.
  - repository: EprAppConfigSettings
    name: RWD-CPR-EPR4P-ADO/epr-app-config-settings
    type: git
    ref: ${{ replace(replace(contains(parameters.releaseVersion, 'RELEASE'),'True',replace('refs/tags/RELEASETAG','RELEASETAG', parameters.releaseVersion)),'False','main') }}
  
  - repository: FrontendAccountCreationMicroservice
    name: defra/epr-frontend-accountcreation-microservice
    type: github
    ref: main
    endpoint: DEFRA
  - repository: FrontendAccountManagementMicroservice
    name: defra/epr-frontend-accountmanagement-microservice
    type: github
    ref: main
    endpoint: DEFRA
  - repository: PomSubmissionCheckSplitter
    name: defra/epr-pom-func-submission-check-splitter
    type: github
    ref: main
    endpoint: DEFRA
  - repository: EprPackagingFrontend
    name: RWD-CPR-EPR4P-ADO/epr_packaging_frontend
    type: git
    ref: main
  - repository: EprLoggingApi
    name: defra/epr-logging-api
    type: github
    ref: main
    endpoint: DEFRA
  - repository: EprRegulatorService
    name: defra/epr-regulator-service
    type: github
    ref: main
    endpoint: DEFRA
  - repository: EprRegulatorServiceFacade
    name: defra/epr-regulator-service-facade
    type: github
    ref: main
    endpoint: DEFRA
  - repository: FacadeAccountMicroservice
    name: defra/epr-facade-account-microservice
    type: github
    ref: main
    endpoint: DEFRA
  - repository: FrontendObligationcheckerMicroservice
    name: defra/epr-obligationchecker-frontend
    type: github
    ref: main
    endpoint: DEFRA
  - repository: EprAntiVirusFunctionApp
    name: defra/epr-anti-virus-function-app
    type: github
    ref: main
    endpoint: DEFRA
  - repository: EprEventDispatcherFunctionApp
    name: defra/epr-event-dispatcher-function-app
    type: github
    ref: main
    endpoint: DEFRA
  - repository: EprPomApiSubmissionStatus
    name: RWD-CPR-EPR4P-ADO/epr_pom_api_submission_status
    type: git
    ref: main
  - repository: EprCommonDataAPi
    name: defra/epr-common-data-api
    type: github
    ref: main
    endpoint: DEFRA
  - repository: EprPomApiWeb
    name: RWD-CPR-EPR4P-ADO/epr_pom_api_web
    type: git
    ref: main
  - repository: EprPomFuncProducerValidation
    name: defra/epr-pom-func-producer-validation
    type: github
    ref: main
    endpoint: DEFRA
  - repository: EprRegistrationValidationFunctionApp
    name: RWD-CPR-EPR4P-ADO/epr-registration-validation-function-app
    type: git
    ref: main
  - repository: BackendAccountMicroservice
    name: RWD-CPR-EPR4P-ADO/backend-account-microservice
    type: git
    ref: main
  - repository: EprDocumentSchemaJobRunnerFunctionApp
    name: defra/epr-document-schema-job-runner-function-app
    type: github
    ref: main
    endpoint: DEFRA

  - repository: EprSubsidiaryFuncBulkUpload
    name: defra/epr-subsidiary-func-bulk-upload
    type: github
    ref: main
    endpoint: DEFRA

  - repository: EprPaymentService
    name: defra/epr-payment-service
    type: github
    ref: main
    endpoint: DEFRA

  - repository: EprPaymentFacade
    name: defra/epr-payment-facade
    type: github
    ref: main
    endpoint: DEFRA

  - repository: EprPaymentFrontend
    name: defra/epr-payment-frontend
    type: github
    ref: main
    endpoint: DEFRA

  - repository: EprPaymentMopup
    name: defra/epr-payment-mopup
    type: github
    ref: main
    endpoint: DEFRA

  - repository: EprPrnCommonBackend
    name: defra/epr-prn-common-backend
    type: github
    ref: main
    endpoint: DEFRA

  - repository: EprPrnIntegrationFunction
    name: defra/epr-prn-integration-function
    type: github
    ref: main
    endpoint: DEFRA


  - repository: CommonTemplates
    name: RWD-CPR-EPR4P-ADO/epr-webapps-code-deploy-templates
    type: git
    ref: main
  - repository: AutomationTesting
    name: RWD-CPR-EPR4P-ADO/epr-playwright-bdd
    type: git
    ref: develop-template-fix


variables:
  - ${{ if eq( parameters.envToDeploy, 'development') }}:
    - name: teamName
      value: ${{ parameters.teamName }}
  - ${{ else }}:
    - name: teamName
      value: ${{ parameters.envToDeploy }}
  - template: pipelines/templates/env-specific-config.yaml@EprAppConfigSettings
    parameters:
      teamName: ${{ variables.teamName }}
  - name: settingsDir
    value: $(Build.SourcesDirectory)/${{ lower(variables.environmentName) }}
  - name: configRepo
    value: EprAppConfigSettings
  - ${{ if and( ne(parameters.teamName, 'tst'), ne(parameters.teamName, 'preprod'), ne(parameters.teamName, 'preprod2'), ne(parameters.teamName, 'prod'), ne(parameters.teamName, 'DEV8'), ne(parameters.teamName, 'DEV15') ) }}:
    - name: useDevConfig
      value: true
    - name: configDir
      value: $(Pipeline.Workspace)/s/dev/config
  - ${{ else }}:
    - name: useDevConfig
      value: false
    - name: configDir
      value: $(settingsDir)

stages:
  - ${{ if eq( parameters.updateSettings, 'true') }}:
    - stage: UpdateSettings
      jobs:
        - template: pipelines/templates/mass-configuration-template.yaml@EprAppConfigSettings
          parameters:
              restartApp: ${{ parameters.updateSettings }}
              subscriptionName: ${{ variables.subscriptionName }}
              webResourceGroupName: ${{ variables.webResourceGroupName }}
              useDevConfig: ${{ variables.useDevConfig }}
              configDirectory: ${{ variables.configDir }}
              environmentSpoke: $(environmentSpoke)
              environmentGroup: ${{ variables.environmentGroup }}
              configTemplateInputDirectory: $(Pipeline.Workspace)/s/dev
              configRepo: ${{ variables.configRepo }}

  - template: templates/deploy-many.yaml
    parameters:
      teamName: ${{ parameters.teamName }}
      envToDeploy: ${{ parameters.envToDeploy }}
      webResourceGroupName: ${{ variables.webResourceGroupName }}
      updateSettings: ${{ parameters.updateSettings }}
